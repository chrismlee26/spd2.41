# Challenging problems we’ve seen before:
# Given an array of k singly-linked lists, each of whose values are in sorted order, combine all nodes (do not create new nodes) into one singly-linked list with all values in order.
# Given a binary search tree, convert it into a sorted doubly-linked list by modifying the original tree nodes (do not create new nodes).
# Let’s say a binary tree is "super balanced" if the difference between the depths of any two leaf nodes is at most one. Write a function to check if a binary tree is "super balanced".

# Problem 1:
# Given an array a of n numbers and a target value t, find two numbers whose sum is t.
# Example: a=[5, 3, 6, 8, 2, 4, 7], t=10  ⇒  [3, 7] or [6, 4] or [8, 2]

# Problem 2:
# Two Sum II - Input Array Is Sorted. Given a 1-indexed array of integer numbers that are already sorted in non-decreasing order, find two numbers such that they add up to a specific target number. Let these two numbers be numbers[index1] and numbers[index2] where 1 <= index1 < index2 <= numbers. Length: https://leetcode.com/problems/two-sum-ii-input-array-is-sorted/

# Problem 5
# Given a single-linked list, find the middle value in the list.

# Problem 6
# Given two sorted linked lists, merge them so that the resulting linked list is also sorted.

# Problem 7
# Given a singly-linked list, find whether or not it contains a cycle, and if it does, find the node at which the cycle starts (the node that two other nodes reference/point to).

# Problem 8
# https://leetcode.com/problems/intersection-of-two-linked-lists/

# Problem 9
# https://leetcode.com/problems/palindrome-linked-list/
# Example: If the given linked list is A → B → C → D → E, return C.
# Assumptions: The length (n) is odd so the linked list has a definite middle.

# Problem 10
# Given a singly-linked list, reverse the order of the list by modifying the nodes’ links.
